global cost_2D
if N_INC == N_INC_INITIAL and N_TRANS == N_TRANS_INITIAL:
    cost_2D = [[] for _ in range(N_TRANS_MAX + 1)]

cost_list = [total_TC_direct, total_TC_indirect, total_IC_inc, total_OC_inc, total_IC_trans, total_OC_trans]
cost_2D[N_TRANS].append(cost_list)

if N_TRANS==N_TRANS_MAX:
    with open(os.path.join(output_directory, f"GAGraph({UNIT_TRANS}{waste_name}){current_time}.txt"), 'w', encoding="utf-8") as file:
        file.write(f"#inc({N_INC_INITIAL}~{N_INC})+trans({N_TRANS_INITIAL}~{N_TRANS})コスト行列\n")
        file.write(f"foldername = '{str(waste_name)}{str(UNIT_TRANS)}'\n")
        file.write(f"cost = {str(cost_2D)}\n")
        
        
# GA_graph用出力
cost_2D_origin = [[[] for _ in range(N_TRANS_INITIAL, N_TRANS_MAX + 1)] for _ in range(N_INC_INITIAL, N_INC_MAX + 1)]

def extract_list(shared_list):  # 共有化されたcost_2Dを通常リストに変換
    if isinstance(shared_list, multiprocessing.managers.ListProxy):
        return [extract_list(item) for item in shared_list]
    else:
        return shared_list

with lock: # 共有化されたcost2Dやcounterをいじるときはlockをかける
    cost_2D[N_INC-N_INC_INITIAL][N_TRANS-N_TRANS_INITIAL] = cost_list
    counter[N_INC] += 1                
    if counter[N_INC] == N_TRANS_MAX - N_TRANS_INITIAL + 1:
        normal_cost_2D = extract_list(cost_2D)
        # 時点N_INC以下のデータのみを抽出
        filtered_cost_2D = normal_cost_2D[:N_INC]
        with open(os.path.join(output_directory, f"GA_Graph({UNIT_TRANS}{waste_name}){current_time}.txt"), 'w', encoding="utf-8") as file:
            file.write(f"#inc({N_INC_INITIAL}~{N_INC})+trans({N_TRANS_INITIAL}~{N_TRANS_MAX})コスト行列\n")
            file.write(f"foldername = '{str(waste_name)}{str(UNIT_TRANS)}'\n")
            file.write(f"cost = {str(filtered_cost_2D)}\n")