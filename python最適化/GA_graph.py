import os
import matplotlib.pyplot as plt
import numpy as np

import matplotlib
matplotlib.rcParams['font.family'] = 'TakaoPGothic' # takao インストール後、matplotlibのフォルダ行ってキャッシュ削除
import datetime
current_time = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')


# リスト合成####################################################################

# cost1 = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
# cost2 = [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]

# array1 = np.array(cost1)
# array2 = np.array(cost2)
# combined_array = np.concatenate((array1, array2), axis=0)
# combined_list = combined_array.tolist()

##############################################################################

#inc(12~16)+trans(0~8)コスト行列
foldername = 'kanen877'
cost = [[[809566.8175120002, 0, 730122.848940638, 646920.625765717, 0, 0], [756324.3437846001, 0, 738130.8673332252, 663984.8110932702, 0, 0], [709089.3468057002, 0, 745138.2591216015, 678838.2013130018, 0, 0], [660503.0148175, 0, 754689.0785014355, 701399.7822935913, 0, 0], [614910.9121995001, 0, 761992.2611693472, 717068.6983114613, 0, 0]], [[709075.9768530001, 55747.60793558, 728297.5929712323, 641771.7980416379, 6149.144388090442, 5949.146488839741], [604349.1856766001, 77806.35890460003, 737536.9785431438, 662391.891459865, 11980.387622496797, 11192.093445221002], [655394.8858707, 29172.790705399995, 734553.8607071745, 647360.8608452809, 9506.340379335852, 9179.11830583231], [613650.6153153, 33220.423210600005, 739122.4948020454, 657274.2743880887, 8901.14901254098, 8100.0350870924085], [550662.0812807003, 33220.423210600005, 752233.5518404023, 690291.6931643476, 8901.14901254098, 8100.0350870924085]], [[641328.6685756, 96201.57143336, 711986.710054316, 588038.8381081988, 19765.116672678712, 18702.590958805107], [542915.3449728002, 162352.54986966003, 716166.4993891808, 596811.4036956333, 23002.597167224907, 21826.10410251656], [569968.7502473, 96201.57143336, 722508.5852197333, 607060.0283073543, 19765.116672678712, 18702.590958805107], [450683.9768300001, 101896.56867098004, 748729.5103019258, 683583.1152998469, 18293.018372452054, 17221.280136363013], [418331.40955750004, 97747.3574417, 750681.6521535534, 685665.3159076982, 20500.617162009425, 19093.922647854026]], [[520705.2298172002, 129761.47104580002, 713687.3236095945, 599995.4950921667, 30189.92590277191, 27583.8473919339], [492786.7677918001, 116590.08697254003, 727974.897142893, 633397.9168372646, 26180.087543447957, 24820.31673172398], [519464.05898750015, 94224.48942144, 715665.2581474964, 599416.6812425161, 29106.054168673443, 27044.97100104905], [399457.24375260004, 123974.38488670003, 747674.3352183625, 679759.9816366847, 22759.006519376533, 22274.384197770458], [358868.4919096, 135116.99188158003, 744645.164624129, 666848.9671813049, 27194.167384993034, 25321.31522345542]], [[445966.94734870014, 153851.6808121801, 713420.8835190898, 598853.3308480494, 36502.556652727166, 33613.03408307591], [403776.8212189001, 196790.25177376004, 705757.3630814373, 566504.325783554, 40448.70219611477, 37107.3200449067], [382120.96427510004, 153851.6808121801, 726093.1128908303, 623277.6701333432, 36502.556652727166, 33613.03408307591], [365423.09984169994, 138559.86258802, 735194.4592342165, 644737.9298219443, 34274.99457666804, 32438.74556888196], [333643.9933976001, 153851.6808121801, 732827.6637966332, 633671.0321799405, 36502.556652727166, 33613.03408307591]], [[395583.85292820015, 175929.4970279001, 710277.4297349071, 589665.9098494356, 40968.544799651645, 38666.13814448335], [335723.00258160004, 209737.8545452601, 714785.8961433609, 590269.0901346424, 42326.17208045352, 40089.575710363744], [430101.66032200004, 130468.98541566, 705214.0286825486, 569961.313960081, 42105.67927193425, 38597.322594871235], [345394.82501420006, 120020.21176822003, 735936.4383741079, 648147.1436555369, 39660.448015042166, 37271.83702669916], [340752.5443477, 113705.8753227, 736601.7007579857, 645164.840667053, 39362.570803822404, 37074.69102602079]], [[310079.50618170004, 243402.68825866005, 698170.979405075, 549467.8044122016, 51227.321092994505, 48189.61079745615], [331398.6987869001, 186545.43586684007, 705502.7164570281, 565683.8682160707, 51359.8613074499, 47535.77091673865], [337401.74756240007, 140035.92857584, 722827.1915481177, 614039.9995680664, 46939.79538182998, 44525.59999447664], [320697.0330574001, 141977.15644651998, 718673.7252384161, 602017.6724275432, 49939.989339316024, 46762.054237877186], [302538.2415899001, 126823.97478650001, 742411.4161732818, 659115.3625245949, 41066.94507427445, 39968.10641330161]], [[324368.8253485, 212100.83318011998, 698174.1551630973, 549701.4820656748, 57198.57167517284, 54049.07264744943], [325421.3932063001, 173176.86491004002, 701496.8591890007, 562822.6361872684, 56265.637937828134, 52831.21993329763], [306513.72363350005, 156268.56827606002, 715549.2135031046, 588857.5377204783, 53612.1717267123, 50693.5759937671], [288143.3601255999, 162230.80065672004, 714211.0848705088, 580840.2244083729, 55387.95353415052, 51649.81703008896], [282888.51530549995, 136506.03223745996, 734102.5398173345, 631653.0171753657, 48973.3556995556, 47515.31000758601]], [[267087.90571329993, 228672.29121990004, 694891.6521114364, 538742.7431227495, 60717.16010759141, 57925.37940502858], [247553.06160540003, 222575.7156752, 701536.5926226899, 552864.9662576907, 60635.19504609209, 57863.92838112823], [278191.55517989997, 180093.76603454, 703172.8594056303, 563590.4580499239, 60446.0058617131, 57691.53801030859], [257147.14061899998, 155452.93559716005, 725048.9923961695, 616989.106703528, 55037.402162644066, 53411.132919130236], [266347.15485469997, 145289.37683487998, 715782.4759034012, 589531.6623261132, 60883.00612683365, 57922.05724204696]]]
# cost = combined_list

horizon = "inc"
horizon = "trans"

##############################################################################

def bar_chart(cost_per_, N_START, filename):
    # コストデータを億単位に変換
    cost_per_ = cost_per_ / 1e4
    
    TC_direct = cost_per_[:, 0]
    TC_indirect = cost_per_[:, 1]
    IC_inc = cost_per_[:, 2]
    OC_inc = cost_per_[:, 3]
    IC_trans = cost_per_[:, 4]
    OC_trans = cost_per_[:, 5]

    plt.figure(figsize=(12, 6))
    N_FACILITY = np.arange(cost_per_.shape[0]) + N_START
    plt.xticks(N_FACILITY)
    plt.bar(N_FACILITY, TC_direct, color='blue', label='TC_direct')
    plt.bar(N_FACILITY, TC_indirect, bottom=TC_direct, color='blue', linestyle='--', label='TC_indirect')
    plt.bar(N_FACILITY, IC_inc, bottom=TC_direct + TC_indirect, color='orange', label='IC_inc')
    plt.bar(N_FACILITY, OC_inc, bottom=TC_direct + TC_indirect + IC_inc, color='orange', linestyle='--', label='OC_inc')
    plt.bar(N_FACILITY, IC_trans, bottom=TC_direct + TC_indirect + IC_inc + OC_inc, color='yellow', label='IC_trans')
    plt.bar(N_FACILITY, OC_trans, bottom=TC_direct + TC_indirect + IC_inc + OC_inc + IC_trans, color='yellow', linestyle='--', label='OC_trans')

    # 同色間点線の描画
    for x in range(cost_per_.shape[0]):
        adjusted_x = x + N_START  # 調整されたインデックス
        plt.hlines(TC_direct[x], adjusted_x - 0.4, adjusted_x + 0.4, colors='black', linestyles='dotted')
        plt.hlines(TC_direct[x] + TC_indirect[x] + IC_inc[x], adjusted_x - 0.4, adjusted_x + 0.4, colors='black', linestyles='dotted')
        plt.hlines(TC_direct[x] + TC_indirect[x] + IC_inc[x] + OC_inc[x] + IC_trans[x], adjusted_x - 0.4, adjusted_x + 0.4, colors='black', linestyles='dotted')

    # 凡例
    handles, labels = plt.gca().get_legend_handles_labels()
    # plt.legend(handles[::-1], labels[::-1], loc='upper left', bbox_to_anchor=(1.05, 1))        
    plt.legend(handles[::-1], labels[::-1], loc='lower left', bbox_to_anchor=(1, 0.4))        

    # ラベル
    plt.xlabel(xlabel)
    plt.ylabel('Cost (億円)')
    plt.title(f'Stacked Bar Chart for {title_suffix}')
    plt.tight_layout(rect=[0, 0, 0.85, 1])
    
    # ファイルに保存
    plt.savefig(filename)
    plt.close()  # グラフを閉じる

if horizon == "inc":
    save_folder = f"graphs_{str(foldername)}_INC_{current_time}"
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)
    for N_TRANS in range(len(cost)):
        cost_per_inc = np.array(cost[N_TRANS])
        title_suffix = f'N_TRANS = {N_TRANS}'
        xlabel = 'N_INC'
        filename = os.path.join(save_folder, f'TRANS{N_TRANS}.png')
        bar_chart(cost_per_inc, 1, filename)

if horizon == "trans":
    save_folder = f"graphs_{str(foldername)}_TRANS_{current_time}"
    if not os.path.exists(save_folder):
        os.makedirs(save_folder)
    transposed_cost = np.transpose(cost, (1, 0, 2))
    for N_INC in range(len(transposed_cost)):
        cost_per_trans = np.array(transposed_cost[N_INC])
        title_suffix = f'N_INC = {N_INC+1}'
        xlabel = 'N_TRANS'
        filename = os.path.join(save_folder, f'INC{N_INC+1}.png')
        bar_chart(cost_per_trans, 0, filename)
